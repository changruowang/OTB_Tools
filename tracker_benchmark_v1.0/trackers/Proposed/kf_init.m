function kf_params = kf_init(Px, Py, Vx, Vy)
%% 本例中，状态x为（坐标x， 坐标y， 速度x， 速度y），观测值z为（坐标x， 坐标y）

    kf_params.B = 0; %外部输入为0
    kf_params.u = 0; %外部输入为0
    kf_params.K = NaN; %卡尔曼增益无需初始化
    kf_params.z = NaN; %这里无需初始化，每次使用kf_update之前需要输入观察值z
    kf_params.P = zeros(4, 4); %初始P设为0

    %% 初始状态：函数外部提供初始化的状态，本例使用观察值进行初始化，Vx，Vy初始为0
    kf_params.x = [Px; Py; Vx; Vy];

    %% 状态转移矩阵A
    kf_params.A = eye(4) + diag(ones(1, 2), 2); % 和线性系统的预测机制有关，这里的线性系统是上一刻的位置加上速度等于当前时刻的位置，而速度本身保持不变

    %% 预测噪声协方差矩阵Q：假设预测过程上叠加一个高斯噪声，协方差矩阵为Q
    %大小取决于对预测过程的信任程度。比如，假设认为运动目标在y轴上的速度可能不匀速，那么可以把这个对角矩阵的最后一个值调大。有时希望出来的轨迹更平滑，可以把这个调更小
    kf_params.Q = diag(ones(4, 1) * 0.001); 

    %% 观测矩阵H：z = H * x
    kf_params.H = eye(2, 4); % 这里的状态是（坐标x， 坐标y， 速度x， 速度y），观察值是（坐标x， 坐标y），所以H = eye(2, 4)

    %% 观测噪声协方差矩阵R：假设观测过程上存在一个高斯噪声，协方差矩阵为R
    kf_params.R = diag(ones(2, 1) * 2); %大小取决于对观察过程的信任程度。比如，假设观测结果中的坐标x值常常很准确，那么矩阵R的第一个值应该比较小
end